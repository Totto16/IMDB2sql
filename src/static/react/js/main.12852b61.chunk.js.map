{"version":3,"sources":["FilmsUi.js","App.js","serviceWorker.js","index.js"],"names":["DownshiftMultiple","props","classes","React","useState","inputValue","setInputValue","selectedItem","setSelectedItem","titles","setTitlesValue","commonPersons","setCommonPersonsValue","client","ApolloClient","uri","getTitlesQuery","searchString","gql","setTitlesDebounced","throttle","debounce","length","query","then","result","films","data","map","film","title","handleKeyDown","event","key","slice","JSON","stringify","item","name","handleDelete","newSelectedItem","splice","indexOf","id","onChange","getInputProps","getItemProps","getLabelProps","isOpen","highlightedIndex","onKeyDown","placeholder","onBlur","onFocus","inputProps","className","container","InputProps","ref","other","TextField","inputRef","root","inputRoot","input","inputInput","renderInput","fullWidth","label","InputLabelProps","startAdornment","Chip","tabIndex","chip","onDelete","target","value","handleInputChange","Paper","paper","square","suggestion","index","suggestionProps","itemProps","isHighlighted","isSelected","MenuItem","selected","component","style","fontWeight","renderSuggestion","useStyles","makeStyles","theme","flexGrow","height","position","zIndex","marginTop","spacing","left","right","margin","flexWrap","width","divider","FilmsUi","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wqCAoEA,SAASA,EAAkBC,GAAQ,IACxBC,EAAWD,EAAXC,QADuB,EAEMC,IAAMC,SAAS,IAFrB,mBAEvBC,EAFuB,KAEXC,EAFW,OAGUH,IAAMC,SAAS,IAHzB,mBAGvBG,EAHuB,KAGTC,EAHS,OAIGL,IAAMC,SAAS,IAJlB,mBAIvBK,EAJuB,KAIfC,EAJe,OAKiBP,IAAMC,SAAS,IALhC,mBAKvBO,EALuB,KAKRC,EALQ,KAMxBC,EAAS,IAAIC,IAAa,CAACC,IAAK,aAEtC,SAASC,EAAeC,GACpB,OAAOC,YAAP,IAA8BD,GAOlC,IAAME,EAAqBC,YAAS,IAAKC,YAAS,IAElD,SAAmBJ,GACf,GAAIA,EAAaK,OAAS,EAEtB,YADAZ,EAAe,IAGnBG,EAAOU,MACH,CAACA,MAAOP,EAAeC,KACrBO,KAAK,SAAAC,GACP,IAAIC,EAAQD,EAAOE,KAAKD,MAAME,IAAI,SAAAC,GAC9B,MAAO,CACHC,MAAOD,EAAKC,SAGpBpB,EAAegB,QAoBvB,SAASK,EAAcC,IACfzB,EAAae,QAAWjB,EAAWiB,QAAwB,UAAdU,EAAMC,IAInD1B,EAAae,SAAWjB,EAAWiB,QAAwB,cAAdU,EAAMC,MACnDzB,EAAgBD,EAAa2B,MAAM,EAAG3B,EAAae,OAAS,IAC5DV,EAAsB,KAtB1BC,EAAOU,MACH,CAACA,MAxBEL,YAAP,IAAoCiB,KAAKC,UAAU7B,MAyB7CiB,KAAK,SAAAC,GACEA,EAAOE,KAAKhB,cAAcW,OAI/BV,EAAsB,6BAClB,4BACKa,EAAOE,KAAKhB,cAAciB,IAAI,SAAAS,GAAI,OAAI,wBAAIJ,IAAKI,EAAKC,MAAOD,EAAKC,WALrE1B,EAAsB,uDAqCtC,IAAM2B,EAAe,SAAAF,GAAI,OAAI,WACzB,IAAMG,EAAe,YAAOjC,GAC5BiC,EAAgBC,OAAOD,EAAgBE,QAAQL,GAAO,GACtD7B,EAAgBgC,GAChB5B,EAAsB,MAG1B,OACI,6BACI,kBAAC,IAAD,CACI+B,GAAG,qBACHtC,WAAYA,EACZuC,SArBZ,SAAsBP,GAClB,IAAIG,EAAe,YAAOjC,IACa,IAAnCiC,EAAgBE,QAAQL,KACxBG,EAAe,sBAAOA,GAAP,CAAwBH,KAE3C/B,EAAc,IACdE,EAAgBgC,IAgBRjC,aAAcA,GAEb,YAOQ,IANHsC,EAME,EANFA,cACAC,EAKE,EALFA,aACAC,EAIE,EAJFA,cACAC,EAGE,EAHFA,OACczC,EAEZ,EAFFA,aACA0C,EACE,EADFA,iBACE,EAC+CJ,EAAc,CAC7DK,UAAWnB,EACXoB,YAAa,0BAFVC,EADH,EACGA,OAAQR,EADX,EACWA,SAAUS,EADrB,EACqBA,QAAYC,EADjC,+CAMJ,OACI,yBAAKC,UAAWrD,EAAQsD,WAlKhD,SAAqBF,GAAa,IACvBG,EAAsCH,EAAtCG,WAAYvD,EAA0BoD,EAA1BpD,QAASwD,EAAiBJ,EAAjBI,IAAQC,EADP,YACgBL,EADhB,gCAG7B,OACI,kBAACM,EAAA,EAAD,eACIH,WAAU,GACNI,SAAUH,EACVxD,QAAS,CACL4D,KAAM5D,EAAQ6D,UACdC,MAAO9D,EAAQ+D,aAEhBR,IAEHE,IAsJaO,CAAY,CACTC,WAAW,EACXjE,UACAkE,MAAO,QACPC,gBAAiBtB,IACjBU,WAAY,CACRa,eAAgB/D,EAAaqB,IAAI,SAAAS,GAAI,OACjC,kBAACkC,EAAA,EAAD,CACItC,IAAKI,EACLmC,UAAW,EACXJ,MAAO/B,EACPkB,UAAWrD,EAAQuE,KACnBC,SAAUnC,EAAaF,OAG/Be,SACAR,SAAU,SAAAZ,IA7D1C,SAA2BA,GACvB1B,EAAc0B,EAAM2C,OAAOC,OAC3BzD,EAAmBa,EAAM2C,OAAOC,OAChChE,EAAsB,IA2DUiE,CAAkB7C,GAClBY,EAASZ,IAEbqB,WAEJC,eAGHN,EACG,kBAAC8B,EAAA,EAAD,CAAOvB,UAAWrD,EAAQ6E,MAAOC,QAAM,GAClCvE,EAAOmB,IAAI,SAACqD,EAAYC,GAAb,OApKhD,SAA0BC,GAAkB,IACjCF,EAAgEE,EAAhEF,WAAYC,EAAoDC,EAApDD,MAAOE,EAA6CD,EAA7CC,UACpBC,EADiEF,EAAlClC,mBACMiC,EACrCI,GAFiEH,EAAhB5E,cAEnB,IAAImC,QAAQuC,EAAWnD,QAAU,EAErE,OACI,kBAACyD,EAAA,EAAD,iBACQH,EADR,CAEInD,IAAKgD,EAAWnD,MAChB0D,SAAUH,EACVI,UAAU,MACVC,MAAO,CACHC,WAAYL,EAAa,IAAM,OAGlCL,EAAWnD,OAsJgB8D,CAAiB,CACbX,aACAC,QACAE,UAAWtC,EAAa,CAACT,KAAM4C,EAAWnD,QAC1CmB,mBACA1C,aAAcA,OAI1B,QAKnBI,GASb,IAAMkF,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACnCjC,KAAM,CACFkC,SAAU,EACVC,OAAQ,KAEZzC,UAAW,CACPwC,SAAU,EACVE,SAAU,YAEdnB,MAAO,CACHmB,SAAU,WACVC,OAAQ,EACRC,UAAWL,EAAMM,QAAQ,GACzBC,KAAM,EACNC,MAAO,GAEX9B,KAAM,CACF+B,OAAQT,EAAMM,QAAQ,GAAK,MAE/BtC,UAAW,CACP0C,SAAU,QAEdxC,WAAY,CACRyC,MAAO,OACPV,SAAU,GAEdW,QAAS,CACLV,OAAQF,EAAMM,QAAQ,OAIf,SAASO,IACpB,IAAM1G,EAAU2F,IAChB,OACI,yBAAKtC,UAAWrD,EAAQ4D,MACpB,kBAAC9D,EAAD,CAAmBE,QAASA,K,ICjPzB2G,E,YAfX,WAAY5G,GAAQ,qEACVA,I,sEAIN,OACI,6BACI,gCACI,kBAAC2G,EAAD,Y,GATFzG,IAAM2G,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlG,KAAK,SAAAmG,GACjCA,EAAaC,iB","file":"js/main.12852b61.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Downshift from 'downshift';\nimport {makeStyles} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\nimport ApolloClient, {gql} from 'apollo-boost';\nimport {debounce, throttle} from \"throttle-debounce\";\n\n\nfunction renderInput(inputProps) {\n    const {InputProps, classes, ref, ...other} = inputProps;\n\n    return (\n        <TextField\n            InputProps={{\n                inputRef: ref,\n                classes: {\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                },\n                ...InputProps,\n            }}\n            {...other}\n        />\n    );\n}\n\nrenderInput.propTypes = {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes: PropTypes.object.isRequired,\n    InputProps: PropTypes.object,\n};\n\nfunction renderSuggestion(suggestionProps) {\n    const {suggestion, index, itemProps, highlightedIndex, selectedItem} = suggestionProps;\n    const isHighlighted = highlightedIndex === index;\n    const isSelected = (selectedItem || '').indexOf(suggestion.title) > -1;\n\n    return (\n        <MenuItem\n            {...itemProps}\n            key={suggestion.title}\n            selected={isHighlighted}\n            component=\"div\"\n            style={{\n                fontWeight: isSelected ? 500 : 400,\n            }}\n        >\n            {suggestion.title}\n        </MenuItem>\n    );\n}\n\nrenderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number]).isRequired,\n    index: PropTypes.number.isRequired,\n    itemProps: PropTypes.object.isRequired,\n    selectedItem: PropTypes.string.isRequired,\n    suggestion: PropTypes.shape({\n        label: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nfunction DownshiftMultiple(props) {\n    const {classes} = props;\n    const [inputValue, setInputValue] = React.useState('');\n    const [selectedItem, setSelectedItem] = React.useState([]);\n    const [titles, setTitlesValue] = React.useState([]);\n    const [commonPersons, setCommonPersonsValue] = React.useState('');\n    const client = new ApolloClient({uri: '/graphql',});\n\n    function getTitlesQuery(searchString) {\n        return gql`{films(search: \"%${searchString}%\", limit: 20) {id, title}}`\n    }\n\n    function getCommonNamesQuery() {\n        return gql`{commonPersons(titles: ${JSON.stringify(selectedItem)}) {name}}`\n    }\n\n    const setTitlesDebounced = throttle(300, debounce(300, setTitles));\n\n    function setTitles(searchString) {\n        if (searchString.length < 3) {\n            setTitlesValue([]);\n            return\n        }\n        client.query(\n            {query: getTitlesQuery(searchString)}\n            ).then(result => {\n            let films = result.data.films.map(film => {\n                return {\n                    title: film.title,\n                }\n            });\n            setTitlesValue(films)\n        })\n    }\n\n    function setCommonPersons() {\n        client.query(\n            {query: getCommonNamesQuery()}\n            ).then(result => {\n                if (!result.data.commonPersons.length) {\n                    setCommonPersonsValue(<label>No common persons</label>);\n                    return\n                }\n                setCommonPersonsValue(<div>\n                    <ul>\n                        {result.data.commonPersons.map(item => <li key={item.name}>{item.name}</li>)}\n                    </ul>\n                </div>)\n        })\n    }\n\n    function handleKeyDown(event) {\n        if (selectedItem.length && !inputValue.length && event.key === 'Enter') {\n            setCommonPersons();\n            return\n        }\n        if (selectedItem.length && !inputValue.length && event.key === 'Backspace') {\n            setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\n            setCommonPersonsValue('')\n        }\n    }\n\n    function handleInputChange(event) {\n        setInputValue(event.target.value);\n        setTitlesDebounced(event.target.value);\n        setCommonPersonsValue('')\n    }\n\n    function handleChange(item) {\n        let newSelectedItem = [...selectedItem];\n        if (newSelectedItem.indexOf(item) === -1) {\n            newSelectedItem = [...newSelectedItem, item];\n        }\n        setInputValue('');\n        setSelectedItem(newSelectedItem);\n    }\n\n    const handleDelete = item => () => {\n        const newSelectedItem = [...selectedItem];\n        newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\n        setSelectedItem(newSelectedItem);\n        setCommonPersonsValue('')\n    };\n\n    return (\n        <div>\n            <Downshift\n                id=\"downshift-multiple\"\n                inputValue={inputValue}\n                onChange={handleChange}\n                selectedItem={selectedItem}\n            >\n                {({\n                      getInputProps,\n                      getItemProps,\n                      getLabelProps,\n                      isOpen,\n                      selectedItem: selectedItem,\n                      highlightedIndex,\n                  }) => {\n                    const {onBlur, onChange, onFocus, ...inputProps} = getInputProps({\n                        onKeyDown: handleKeyDown,\n                        placeholder: 'Select multiple films',\n                    });\n\n                    return (\n                        <div className={classes.container}>\n                            {renderInput({\n                                fullWidth: true,\n                                classes,\n                                label: 'Films',\n                                InputLabelProps: getLabelProps(),\n                                InputProps: {\n                                    startAdornment: selectedItem.map(item => (\n                                        <Chip\n                                            key={item}\n                                            tabIndex={-1}\n                                            label={item}\n                                            className={classes.chip}\n                                            onDelete={handleDelete(item)}\n                                        />\n                                    )),\n                                    onBlur,\n                                    onChange: event => {\n                                        handleInputChange(event);\n                                        onChange(event);\n                                    },\n                                    onFocus,\n                                },\n                                inputProps,\n                            })}\n\n                            {isOpen ? (\n                                <Paper className={classes.paper} square>\n                                    {titles.map((suggestion, index) =>\n                                        renderSuggestion({\n                                            suggestion,\n                                            index,\n                                            itemProps: getItemProps({item: suggestion.title}),\n                                            highlightedIndex,\n                                            selectedItem: selectedItem,\n                                        }),\n                                    )}\n                                </Paper>\n                            ) : null}\n                        </div>\n                    );\n                }}\n            </Downshift>\n            {commonPersons}\n        </div>\n    );\n}\n\nDownshiftMultiple.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        height: 250,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: 1,\n        marginTop: theme.spacing(1),\n        left: 0,\n        right: 0,\n    },\n    chip: {\n        margin: theme.spacing(0.5, 0.25),\n    },\n    inputRoot: {\n        flexWrap: 'wrap',\n    },\n    inputInput: {\n        width: 'auto',\n        flexGrow: 1,\n    },\n    divider: {\n        height: theme.spacing(2),\n    },\n}));\n\nexport default function FilmsUi() {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <DownshiftMultiple classes={classes}/>\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport FilmsUi from \"./FilmsUi\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <header>\n                    <FilmsUi/>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}